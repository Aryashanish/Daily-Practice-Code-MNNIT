//Problem Link
https://practice.geeksforgeeks.org/problems/n-digit-numbers-with-digits-in-increasing-order5903/1?fbclid=IwAR15GwMxYhO2k26AWezF3AcHmbCxoaSgzUF8_zUaMJB5uhD5Ru5AgzRTLzk#

//Code
class Solution
{
public:
    vector<int>ans;
    void find_ans(int num,int n){
        if(n==0){
            ans.push_back(num);
            return ;
        }
        int m=num;
        for(int i=(num%10)+1; i<10;i++){
            num=m*10+i;
            find_ans(num,n-1);
        }
    }
    vector<int> increasingNumbers(int N)
    {
        // Write Your Code here
        if(N==1)ans.push_back(0);
        find_ans(0,N);
        return ans;
    }
};


//Problem Link
https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/?fbclid=IwAR11lgDtF3zf03MerKNbo4Dyb4DTBM6p2H_XkbFjSyKTEOOlWc5rqgeJfRU

//Code
class Solution {
public:
    int noZero(vector<int>& v , int end){
        int zero = 0;
        for(int i=0; i<end; i++){
            if(v[i] == 0)
                zero++;
        }
        return zero;
    }
    int noOne(vector<int>& v , int start){
        int one = 0;
        for(int i=start; i<v.size(); i++){
            if(v[i] == 1)
                one++;
        }
        return one;
    }
    vector<int> maxScoreIndices(vector<int>& nums) {
        // vector<int> ans{}; 
        // int j = 0;
        // int temp = -1;
        // int l = 0; 
        // int r = 0;
        // for(int i=0; i<=nums.size(); i++){
        //     if(i == 0){
        //         l = 0;
        //         r = noOne(nums,i);
        //         temp = (l+r);
        //         ans.push_back(i);
        //         cout<<i<<" ";
        //     }
        //     else if(i == nums.size()){
        //         l = noZero(nums,i);
        //         r = 0;
        //         if(temp == (l+r)){
        //             ans.push_back(i);
        //         }
        //         if(temp < (l+r)){
        //             temp = (l+r);
        //             ans.clear();
        //             ans.push_back(i);
        //         }
        //     }
        //     else{
        //         l = noZero(nums,i);
        //         r = noOne(nums,i);
        //         if(temp == (l+r)){
        //             ans.push_back(i);
        //         }
        //         if(temp < (l+r)){
        //             temp = (l+r);
        //             ans.clear();
        //             ans.push_back(i);
        //         }
        //     }
        // }
        // return ans;
        
        
        const int sum_1 = count(nums.begin(), nums.end(), 1);
        
        vector<int> ans{};
        int cnt_1 = 0, sc = 0, sc_max = 0;//cnt_1 = # of zeros on the left; initially, it is 0
        for (int i = 0; i <= nums.size(); ++i)
        {
            if (i > 0)//when i = 0, cnt_1 is 0 (initial value); i.e., count nothing on the left
                cnt_1 += nums[i-1];
            
            sc = (i - cnt_1) + (sum_1 - cnt_1);//score = left zeros + right ones
            
            if (sc > sc_max)
            {
                sc_max = sc;
                ans.clear();
                ans.push_back(i);
            }
            else if (sc == sc_max)
            {
                ans.push_back(i);
            }
        }
        
        return ans;
    }
};
