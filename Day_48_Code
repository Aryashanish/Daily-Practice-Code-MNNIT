//Problem Link
https://practice.geeksforgeeks.org/problems/union-of-two-sorted-arrays-1587115621/1?fbclid=IwAR1geKwWJq7wRk_sdLkAemixZ2hPbhEFgnz8rRP-2qocT4nvA4lHxZZXDkE#

//Code
vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        //Your code here
        //return vector with correct order of elements
        vector<int> v;
        int i = 0;
        int j = 0;
        while(i < n && j <m){
            if(arr1[i] < arr2[j]){
                v.push_back(arr1[i]);
                i++;
            }
            else if(arr1[i] > arr2[j]){
                v.push_back(arr2[j]);
                j++;
            }
            else{
                v.push_back(arr1[i]);
                i++;
                j++;
            }
        }
        
        for(;i<n;i++)
            v.push_back(arr1[i]);
        for(;j<m;j++)
            v.push_back(arr2[j]);
         
        vector<int> ans;  
        ans.push_back(v[0]);
        for(int k=1; k<v.size(); k++){
            // cout<<ans.back()<<" ";
            if(ans.back() != v[k])
                ans.push_back(v[k]);
        }
        return ans;
    }
    
    
    //Problrm Link
    https://leetcode.com/problems/sort-list/submissions/?fbclid=IwAR2sguCkjRzybFVKoZjC3kVQoys-vOPwQJ5sN-MwAGKLTd0gc7O34qd--EY
    
    //Code
    class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL)
            return head;
        ListNode* p = head;
        vector<int> v;
        while(p){
            v.push_back(p->val);
            p = p->next;
        }
        
        sort(v.begin() , v.end());
        
        ListNode *temp , *q;
        ListNode *h = new ListNode(v[0]);
        q = h;
        for(int i=1; i<v.size(); i++){
            temp = new ListNode(v[i]);
            q->next = temp;
            q = temp;
        }
        
        return h;
    }
};
