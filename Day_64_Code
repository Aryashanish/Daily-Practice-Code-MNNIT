//Problem Link
https://leetcode.com/problems/minimum-cost-of-buying-candies-with-discount/?fbclid=IwAR3BEHW_PWudR30QUlwFqp57GH_urplvRE_IGkcpHNcSCMR_-HaAAJ1QhnI


//Code
class Solution {
public:
    int minimumCost(vector<int>& cost) {
//         sort(cost.begin() , cost.end());
//         int i = 0;
//         int sum = 0;
//         int n = cost.size();
//         if(n == 1)
//             return cost[0];
        
//         if( n < 3)
//             return (cost[0] + cost[1]);
        
//         while(i < n){
//             if((i+1) < n && (i+2) < n){
//                 sum =sum + cost[i+1] + cost[i+2];
//                 i += 3;
//             }
//             else
//                 break;
//         }
//         return sum;
        
        sort(cost.begin(),cost.end());
        int res = 0;
        for(int i=cost.size()-1;i>=0;i-=3){
            res += cost[i];
            if(i > 0){res += cost[i-1];}
        }
        return res;
        
    }
};



//Problem Link
https://leetcode.com/problems/next-greater-element-ii/?fbclid=IwAR1N86-BtgIhYuMJlvDBiHnPfsMoIl-AI0jHph7-os1qIIcBWLDSFgZDVus



//Code
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
//         int i , j;
//         int n = nums.size();
//         int flag = 1;
//         for(i = 0 ; i<n; i++){
//             for(j = i+1; j<n; j++){
//                 if(nums[i] == nums[j]){
//                     flag = 0;
//                     break;
//                 }
//             }
//             if(flag == 0)
//                 break;
//         }
        
//         vector<int> ans;
//         int k = 0;
//         while(k < n-1){
//             if(nums[k] < nums[k+1])
//                 ans.push_back(nums[k+1]);
//             else
//                 ans.push_back(-1);
                
//             k++;
//         }
//         i++;
//         int max = -1;
//         while(i < j){
//             if(nums[i] > max)
//                 max = nums[i];
            
//             i++;
//         }
//         ans.push_back(max);
//         return ans;
        
        
        int n = nums.size();
        vector<int> ans(n);
        stack<int> st;
        for(int i=n-2;i>=0;i--)
        {
            // if current element is greater than stack top then insert it and pop top of stack
            while(st.size()>0 && st.top() <=nums[i]) 
            {
               st.pop();
            }
            st.push(nums[i]);
        }
        for(int i=n-1;i>=0;i--)
        {
            while(st.size()>0 && st.top() <=nums[i]) 
            {
               st.pop();
            }
            // if stack is empty then no greater element then add -1 else stack top
            ans[i] = st.size() == 0?-1 : st.top();
            st.push(nums[i]);
        }
        return ans;
    }
};
