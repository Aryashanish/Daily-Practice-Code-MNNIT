//Problem Link
https://practice.geeksforgeeks.org/problems/47e5aa3f32aee9e0405f04960f37c8a562d96a2f/1?fbclid=IwAR3X9swwd_ol2jj1y8VrFof0_cmFKynNKz2yDYPhk_hhvSZeQf6bzN6Zo_8

//Code
class Solution {
  public:
    void prank(long long a[], int n){
        // code here
        for(int i=0; i<n; i++)
            a[i] = a[i] + (a[a[i]]%n)*n;
            
        for(int i=0; i<n; i++)
            a[i] = a[i]/n;
    }
};


//Problem Link
https://practice.geeksforgeeks.org/problems/add-1-to-a-number-represented-as-linked-list/1


//Code--
class Solution
{
    public:
    Node* reverseList(Node* head)
    { 
       
        Node* prev = NULL;
        Node* curr = head;
        while(curr)
        {
            Node* temp = curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
    Node* addOne(Node *head) 
    {
        // Your Code here
        Node *h = reverseList(head);
        Node *ptr = h;
        int carry = (ptr->data + 1)/10;
        ptr->data = (ptr->data + 1)%10;
        ptr = ptr->next;

        while (ptr != NULL)
        {
            int data = ptr->data;
            ptr->data = (carry + ptr->data) % 10;
            carry = (carry + data) / 10;
            ptr = ptr->next;
        }
        
        if (carry > 0)
        {
            Node *rev = reverseList(h);
            Node *res = new Node(carry);
            res->next = rev;
            return res;
        }
        else
            return reverseList(h);
        
        
        // Node *p = head;
        // long long res = 0;
        // while(p){
        //     res = res *10 + p->data;
        //     p = p->next;
        // }
        // res++;
        // Node *t;
        // Node *h = new Node(res%10);
        // res = res/10;
        // t = h;
        // while(res > 0){
        //     Node *temp = new Node(res%10);
        //     res = res/10;
        //     t->next = temp;
        //     t = temp;
        // }
        // return reverse(h);
        
        
        // return head of list after adding one
        // Node *p = reverse(head);
        // Node *t = p;
        
        // while(t){
        //     if(t->data < 9){
        //         t->data += 1;
        //         return reverse(t);
        //     }
        //     else{
        //         t->data = 0;
        //     }
        //     t = t->next;
        // }
        
        // Node *q = p;
        // while(q->next)
        //     q = q->next;
        
        // Node *temp = new Node(1);
        // q->next = temp;
        // return reverse(p);
    }
};
